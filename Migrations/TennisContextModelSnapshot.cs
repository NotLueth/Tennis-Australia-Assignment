// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TennisAustraliaAssignment.Data;

namespace TennisAustraliaAssignment.Migrations
{
    [DbContext(typeof(TennisContext))]
    partial class TennisContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TennisAustraliaAssignment.Models.AgeBracket", b =>
                {
                    b.Property<int>("AgeBracketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgeBracketDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AgeBracketName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("AgeBracketID");

                    b.ToTable("AgeBracket");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.FinaleResult", b =>
                {
                    b.Property<int>("FinaleResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatchID")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationID")
                        .HasColumnType("int");

                    b.Property<int>("SecondPlayerScore")
                        .HasColumnType("int");

                    b.Property<int>("SecondRegistrationID")
                        .HasColumnType("int");

                    b.Property<int>("SetsPlayed")
                        .HasColumnType("int");

                    b.Property<int>("WinRegistrationFinaleScore")
                        .HasColumnType("int");

                    b.Property<int>("WinRegistrationID")
                        .HasColumnType("int");

                    b.HasKey("FinaleResultID");

                    b.HasIndex("MatchID");

                    b.HasIndex("RegistrationID");

                    b.ToTable("FinaleResults");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.LeagueRating", b =>
                {
                    b.Property<int>("LeagueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("LeagueID");

                    b.ToTable("LeagueRatings");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.Match", b =>
                {
                    b.Property<int>("MatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FirstRegistrationID")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationDetailsID")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int>("SecondRegistrationID")
                        .HasColumnType("int");

                    b.Property<int>("TournamentBracketID")
                        .HasColumnType("int");

                    b.HasKey("MatchID");

                    b.HasIndex("RegistrationDetailsID");

                    b.HasIndex("TournamentBracketID");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.PersonalDetails", b =>
                {
                    b.Property<int>("PersonalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Postcode")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("PersonalID");

                    b.ToTable("PersonalDetails");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PersonalDetails");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.Registration", b =>
                {
                    b.Property<int>("RegistrationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("RegistrationSignDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RegistrationID");

                    b.ToTable("registrations");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.RegistrationDetails", b =>
                {
                    b.Property<int>("RegistrationDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlayerPersonalID")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationID")
                        .HasColumnType("int");

                    b.HasKey("RegistrationDetailsID");

                    b.HasIndex("PlayerPersonalID");

                    b.HasIndex("RegistrationID");

                    b.ToTable("RegistrationDetails");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.SetResult", b =>
                {
                    b.Property<int>("SetResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FirstRegIDScore")
                        .HasColumnType("int");

                    b.Property<int>("MatchID")
                        .HasColumnType("int");

                    b.Property<int>("SecondRegIDScore")
                        .HasColumnType("int");

                    b.Property<int>("set")
                        .HasColumnType("int");

                    b.HasKey("SetResultID");

                    b.HasIndex("MatchID");

                    b.ToTable("setResults");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.Surface", b =>
                {
                    b.Property<int>("SurfaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SurfaceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SurfaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("SurfaceID");

                    b.ToTable("Surface");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganiserPersonalID")
                        .HasColumnType("int");

                    b.Property<int>("PrizeMoney")
                        .HasColumnType("int");

                    b.Property<string>("Qualifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<DateTime>("SingupEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SingupStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TournamentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TournamentTypeID")
                        .HasColumnType("int");

                    b.Property<int>("VenueID")
                        .HasColumnType("int");

                    b.HasKey("TournamentID");

                    b.HasIndex("OrganiserPersonalID");

                    b.HasIndex("TournamentTypeID");

                    b.HasIndex("VenueID");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.TournamentBracket", b =>
                {
                    b.Property<int>("TournamentBracketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgeBracketID")
                        .HasColumnType("int");

                    b.Property<int>("LeagueRatingLeagueID")
                        .HasColumnType("int");

                    b.Property<int>("TournamentID")
                        .HasColumnType("int");

                    b.HasKey("TournamentBracketID");

                    b.HasIndex("AgeBracketID");

                    b.HasIndex("LeagueRatingLeagueID");

                    b.HasIndex("TournamentID");

                    b.ToTable("TournamentBrackets");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.TournamentType", b =>
                {
                    b.Property<int>("TournamentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TournamentTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TournamentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("TournamentTypeID");

                    b.ToTable("TournamentTypes");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.Venue", b =>
                {
                    b.Property<int>("VenueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SurfaceID")
                        .HasColumnType("int");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("VenueID");

                    b.HasIndex("SurfaceID");

                    b.ToTable("Venue");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.Organiser", b =>
                {
                    b.HasBaseType("TennisAustraliaAssignment.Models.PersonalDetails");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Organiser");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.Player", b =>
                {
                    b.HasBaseType("TennisAustraliaAssignment.Models.PersonalDetails");

                    b.Property<int>("AustralianRanking")
                        .HasColumnType("int");

                    b.Property<int>("TennisMembershipNumber")
                        .HasColumnType("int");

                    b.Property<int>("UniversalTennisRating")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Player");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.FinaleResult", b =>
                {
                    b.HasOne("TennisAustraliaAssignment.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisAustraliaAssignment.Models.Registration", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationID");
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.Match", b =>
                {
                    b.HasOne("TennisAustraliaAssignment.Models.RegistrationDetails", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationDetailsID");

                    b.HasOne("TennisAustraliaAssignment.Models.TournamentBracket", "TournamentBracket")
                        .WithMany()
                        .HasForeignKey("TournamentBracketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.RegistrationDetails", b =>
                {
                    b.HasOne("TennisAustraliaAssignment.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerPersonalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisAustraliaAssignment.Models.Registration", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.SetResult", b =>
                {
                    b.HasOne("TennisAustraliaAssignment.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.Tournament", b =>
                {
                    b.HasOne("TennisAustraliaAssignment.Models.Organiser", "Organiser")
                        .WithMany()
                        .HasForeignKey("OrganiserPersonalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisAustraliaAssignment.Models.TournamentType", "TournamentType")
                        .WithMany()
                        .HasForeignKey("TournamentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisAustraliaAssignment.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.TournamentBracket", b =>
                {
                    b.HasOne("TennisAustraliaAssignment.Models.AgeBracket", "AgeBracket")
                        .WithMany()
                        .HasForeignKey("AgeBracketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisAustraliaAssignment.Models.LeagueRating", "LeagueRating")
                        .WithMany()
                        .HasForeignKey("LeagueRatingLeagueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisAustraliaAssignment.Models.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TennisAustraliaAssignment.Models.Venue", b =>
                {
                    b.HasOne("TennisAustraliaAssignment.Models.Surface", "Surface")
                        .WithMany()
                        .HasForeignKey("SurfaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
